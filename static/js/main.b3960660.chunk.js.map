{"version":3,"sources":["NoteSelector.module.css","App.module.css","Fretboard.module.css","Fretboard.tsx","NoteSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","rows","columns","Array","from","keys","inlays","row","column","Fretboard","props","string","fret","className","styles","container","info","fretboard","map","stringMatch","match","key","clsx","nut","note","inlay","find","Name","Accidental","strings","name","E","accidental","B","G","D","A","chromaticScale","SHARP","FLAT","C","F","NoteSelector","onNext","useState","selectedName","setSelectedName","selectedAccidental","setAccidental","stringNote","index","findIndex","notes","length","ButtonGroup","Button","active","onClick","color","disabled","getRandomInt","min","max","Math","ceil","floor","random","randomNotePosition","App","position","setPosition","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3960660.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NoteSelector_container__3M-mk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Fretboard_container__Jh935\",\"fretboard\":\"Fretboard_fretboard__gw8P6\",\"nut\":\"Fretboard_nut__3hB_N\",\"fret\":\"Fretboard_fret__3bRCi\",\"open-note\":\"Fretboard_open-note__1TuzX\",\"sixth-string-open-note\":\"Fretboard_sixth-string-open-note__22p2m\",\"inlay\":\"Fretboard_inlay__1dLi5\",\"inlay-top\":\"Fretboard_inlay-top__JlOop\",\"inlay-bottom\":\"Fretboard_inlay-bottom__1pbgK\",\"note\":\"Fretboard_note__21uMM\",\"sixth-string-note\":\"Fretboard_sixth-string-note__BCNmY\",\"info\":\"Fretboard_info__2cSVq\",\"info-note\":\"Fretboard_info-note__3nyfo\"};","import React from \"react\";\nimport clsx from \"clsx\";\n\nimport styles from \"./Fretboard.module.css\";\n\ninterface FretboardProps {\n  string: number;\n  fret: number;\n}\n\nconst rows = [1, 2, 3, 4, 5];\nconst columns = Array.from(Array(13).keys());\nconst inlays = [\n  { row: 2, column: 12 },\n  { row: 3, column: 3 },\n  { row: 3, column: 5 },\n  { row: 3, column: 7 },\n  { row: 3, column: 9 },\n  { row: 4, column: 12 },\n];\n\nexport default function Fretboard(props: FretboardProps) {\n  const { string, fret } = props;\n  return (\n    <div className={styles.container}>\n      <div className={styles.info}>\n        <div>\n          (1)<span className={styles[\"info-note\"]}>E</span>\n        </div>\n        <div>\n          (2)<span className={styles[\"info-note\"]}>B</span>\n        </div>\n        <div>\n          (3)<span className={styles[\"info-note\"]}>G</span>\n        </div>\n        <div>\n          (4)<span className={styles[\"info-note\"]}>D</span>\n        </div>\n        <div>\n          (5)<span className={styles[\"info-note\"]}>A</span>\n        </div>\n        <div>\n          (6)<span className={styles[\"info-note\"]}>E</span>\n        </div>\n      </div>\n      <div className={styles.fretboard}>\n        {rows.map((row) =>\n          columns.map((column) => {\n            const stringMatch = string === row || (string === 6 && row === 5);\n            const match = fret === column && stringMatch;\n            const key = `${row}-${column}`;\n\n            // open string notes\n            if (column === 0) {\n              return (\n                <div\n                  className={clsx({\n                    [styles.nut]: true,\n                    [styles.note]: match && fret !== 0,\n                  })}\n                  key={key}\n                />\n              );\n            }\n\n            const inlay = inlays.find(\n              (inlay) => row === inlay.row && column === inlay.column\n            );\n            return (\n              <div\n                className={clsx({\n                  [styles.fret]: true,\n                  [styles[\"open-note\"]]: stringMatch && fret === 0,\n                  [styles[\"sixth-string-open-note\"]]:\n                    stringMatch && string === 6 && fret === 0,\n                })}\n                key={key}\n              >\n                {match && (\n                  <div\n                    className={clsx({\n                      [styles.note]: true,\n                      [styles[\"sixth-string-note\"]]: string === 6,\n                    })}\n                  />\n                )}\n                {inlay && (\n                  <div\n                    className={clsx({\n                      [styles.inlay]: true,\n                      [styles[\"inlay-top\"]]: row === 2,\n                      [styles[\"inlay-bottom\"]]: row === 4,\n                    })}\n                    key={`${key}-inlay`}\n                  />\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Button, ButtonGroup } from \"reactstrap\";\n\nimport styles from \"./NoteSelector.module.css\";\n\nenum Name {\n  A = \"A\",\n  B = \"B\",\n  C = \"C\",\n  D = \"D\",\n  E = \"E\",\n  F = \"F\",\n  G = \"G\",\n}\n\nenum Accidental {\n  SHARP = \"sharp\",\n  FLAT = \"flat\",\n}\n\ninterface NoteSelectorProps {\n  onNext: () => void;\n  string: number;\n  fret: number;\n}\n\ninterface Note {\n  name: Name;\n  accidental: Accidental | null;\n}\n\nconst strings = [\n  { name: Name.E, accidental: null },\n  { name: Name.B, accidental: null },\n  { name: Name.G, accidental: null },\n  { name: Name.D, accidental: null },\n  { name: Name.A, accidental: null },\n  { name: Name.E, accidental: null },\n];\n\nconst chromaticScale: Note[][] = [\n  [{ name: Name.A, accidental: null }],\n  [\n    { name: Name.A, accidental: Accidental.SHARP },\n    { name: Name.B, accidental: Accidental.FLAT },\n  ],\n  [{ name: Name.B, accidental: null }],\n  [{ name: Name.C, accidental: null }],\n  [\n    { name: Name.C, accidental: Accidental.SHARP },\n    { name: Name.D, accidental: Accidental.FLAT },\n  ],\n  [{ name: Name.D, accidental: null }],\n  [\n    { name: Name.D, accidental: Accidental.SHARP },\n    { name: Name.E, accidental: Accidental.FLAT },\n  ],\n  [{ name: Name.E, accidental: null }],\n  [{ name: Name.F, accidental: null }],\n  [\n    { name: Name.F, accidental: Accidental.SHARP },\n    { name: Name.G, accidental: Accidental.FLAT },\n  ],\n  [{ name: Name.G, accidental: null }],\n  [\n    { name: Name.G, accidental: Accidental.SHARP },\n    { name: Name.A, accidental: Accidental.FLAT },\n  ],\n];\n\nexport default function NoteSelector(props: NoteSelectorProps) {\n  const { string, fret, onNext } = props;\n  const [selectedName, setSelectedName] = useState<Name | null>(null);\n  const [selectedAccidental, setAccidental] = useState<Accidental | null>(null);\n\n  let stringNote = strings[string - 1];\n  const stringIndex = chromaticScale.findIndex((notes) => {\n    for (const note of notes) {\n      if (\n        note.name === stringNote.name &&\n        note.accidental === stringNote.accidental\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  const index = (stringIndex + fret) % chromaticScale.length;\n  let notes = chromaticScale[index];\n\n  const match = notes.find(\n    (note: Note) =>\n      note.name === selectedName && note.accidental === selectedAccidental\n  );\n\n  return (\n    <div className={styles.container}>\n      <ButtonGroup className={styles[\"note-group\"]}>\n        <Button\n          active={selectedName === Name.A}\n          onClick={() => setSelectedName(Name.A)}\n        >\n          {Name.A}\n        </Button>\n        <Button\n          active={selectedName === Name.B}\n          onClick={() => setSelectedName(Name.B)}\n        >\n          {Name.B}\n        </Button>\n        <Button\n          active={selectedName === Name.C}\n          onClick={() => setSelectedName(Name.C)}\n        >\n          {Name.C}\n        </Button>\n        <Button\n          active={selectedName === Name.D}\n          onClick={() => setSelectedName(Name.D)}\n        >\n          {Name.D}\n        </Button>\n        <Button\n          active={selectedName === Name.E}\n          onClick={() => setSelectedName(Name.E)}\n        >\n          {Name.E}\n        </Button>\n        <Button\n          active={selectedName === Name.F}\n          onClick={() => setSelectedName(Name.F)}\n        >\n          {Name.F}\n        </Button>\n        <Button\n          active={selectedName === Name.G}\n          onClick={() => setSelectedName(Name.G)}\n        >\n          {Name.G}\n        </Button>\n      </ButtonGroup>\n      <ButtonGroup>\n        <Button\n          active={selectedAccidental === Accidental.SHARP}\n          onClick={() => {\n            setAccidental(\n              selectedAccidental === Accidental.SHARP ? null : Accidental.SHARP\n            );\n          }}\n        >\n          &#9839;\n        </Button>\n        <Button\n          active={selectedAccidental === Accidental.FLAT}\n          onClick={() => {\n            setAccidental(\n              selectedAccidental === Accidental.FLAT ? null : Accidental.FLAT\n            );\n          }}\n        >\n          &#9837;\n        </Button>\n      </ButtonGroup>\n      <Button\n        color=\"success\"\n        disabled={!match}\n        onClick={() => {\n          if (match) {\n            onNext();\n            setSelectedName(null);\n            setAccidental(null);\n          }\n        }}\n      >\n        Next\n      </Button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport styles from \"./App.module.css\";\nimport Fretboard from \"./Fretboard\";\nimport NoteSelector from \"./NoteSelector\";\n\nfunction getRandomInt(min: number, max: number): number {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction randomNotePosition() {\n  return {\n    string: getRandomInt(1, 6),\n    fret: getRandomInt(0, 12),\n  };\n}\n\nfunction App() {\n  const [position, setPosition] = useState(randomNotePosition());\n  return (\n    <div className={styles.container}>\n      <Fretboard {...position} />\n      <NoteSelector\n        onNext={() => {\n          setPosition(randomNotePosition());\n        }}\n        {...position}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}